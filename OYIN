# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ahOnfNvdB29getYRLpIlxUAU8xeynTy
"""

import random

def sonni_topish_oyini():
  """
  Kompyuter o'ylagan sonni topish o'yinini o'ynaydi.
  """
  print("Kompyuter 2 dan 50 gacha bo'lgan juft sonni o'yladi. Uni toping!")

  # Kompyuter 2 dan 50 gacha tasodifiy juft son tanlaydi
  kompyuter_soni = random.randrange(2, 51, 2)

  taxminlar_soni = 0

  # Foydalanuvchi sonni topmaguncha davom etamiz
  while True:
    try:
      # Foydalanuvchidan taxminni so'raymiz
      foydalanuvchi_taxmini = int(input("Taxminingizni kiriting: "))
      taxminlar_soni += 1

      # Foydalanuvchi kiritgan sonning juftligini tekshiramiz
      if foydalanuvchi_taxmini % 2 != 0:
          print("Iltimos, juft son kiriting.")
          continue # Agar son toq bo'lsa, keyingi taxminga o'tamiz

      # Taxminni kompyuter soni bilan solishtiramiz
      if foydalanuvchi_taxmini < kompyuter_soni:
        print("Kattaroq juft son o'yladim!")
      elif foydalanuvchi_taxmini > kompyuter_soni:
        print("Kichikroq juft son o'yladim!")
      else:
        # Son topildi
        print(f"Tabriklaymiz! Siz sonni {taxminlar_soni} ta taxminda topdingiz!")
        break # O'yinni tugatamiz

    except ValueError:
      print("Noto'g'ri kiritish. Iltimos, butun son kiriting.")

# O'yinni boshlash
sonni_topish_oyini()



import random

def sonni_topish_oyini():
  """
  Kompyuter o'ylagan sonni topish o'yinini o'ynaydi.
  """
  print("Kompyuter 2 dan 50 gacha bo'lgan juft sonni o'yladi. Uni toping!")

  # Kompyuter 2 dan 50 gacha tasodifiy juft son tanlaydi
  kompyuter_soni = random.randrange(2, 51, 2)

  taxminlar_soni = 0

  # Foydalanuvchi sonni topmaguncha davom etamiz
  while True:
    try:
      # Foydalanuvchidan taxminni so'raymiz
      foydalanuvchi_taxmini = int(input("Taxminingizni kiriting: "))
      taxminlar_soni += 1

      # Foydalanuvchi kiritgan sonning juftligini tekshiramiz
      if foydalanuvchi_taxmini % 2 != 0:
          print("Iltimos, juft son kiriting.")
          continue # Agar son toq bo'lsa, keyingi taxminga o'tamiz

      # Taxminni kompyuter soni bilan solishtiramiz
      if foydalanuvchi_taxmini < kompyuter_soni:
        print("Kattaroq juft son o'yladim!")
      elif foydalanuvchi_taxmini > kompyuter_soni:
        print("Kichikroq juft son o'yladim!")
      else:
        # Son topildi
        print(f"Tabriklaymiz! Siz sonni {taxminlar_soni} ta taxminda topdingiz!")
        break # O'yinni tugatamiz

    except ValueError:
      print("Noto'g'ri kiritish. Iltimos, butun son kiriting.")

# O'yinni boshlash
sonni_topish_oyini()

def check_winner(board, player):
    """O'yinchining g'alaba qozonganligini tekshiradi."""
    # Qatorlar va ustunlarni tekshirish
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True

    # Diagonallarni tekshirish
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def check_draw(board):
    """O'yinning durang bilan tugaganligini tekshiradi."""
    return all(board[i][j] != '' for i in range(3) for j in range(3))

def computer_move(board, buttons):
    """Kompyuterning tasodifiy yurishini amalga oshiradi."""
    empty_cells = [(r, c) for r in range(3) for c in range(3) if board[r][c] == '']
    if empty_cells:
        r, c = random.choice(empty_cells)
        board[r][c] = '0'
        buttons[r][c].description = '0'
        check_game_status(board, buttons)


def check_game_status(board, buttons):
    """O'yin holatini tekshiradi (g'alaba, durang)."""
    if check_winner(board, 'X'):
        print("Tabriklaymiz! X g'alaba qozondi!")
        disable_buttons(buttons)
    elif check_winner(board, '0'):
        print("Kompyuter (0) g'alaba qozondi!")
        disable_buttons(buttons)
    elif check_draw(board):
        print("Durang!")
        disable_buttons(buttons)

def disable_buttons(buttons):
    """Barcha tugmalarni o'chiradi."""
    for row in buttons:
        for button in row:
            button.disabled = True

def on_button_click(b):
    """Tugma bosilganda ishga tushadigan funksiya."""
    row, col = [(r, c) for r in range(3) for c in range(3) if buttons[r][c] is b][0]

    if board[row][col] == '':
        board[row][col] = 'X'
        b.description = 'X'
        check_game_status(board, buttons)
        if any('' in row for row in board): # Agar o'yin tugamagan bo'lsa
            computer_move(board, buttons)


# Har bir tugmaga on_button_click funksiyasini bog'lash
for r in range(3):
    for c in range(3):
        buttons[r][c].on_click(on_button_click)

# Create the car object
# car = Car(road_x + road_width // 2, height - 50, car_image) # Bu qator yuqoridagi katakchada yaratilgan

# 6. O'yin sikli
running = True
clock = pygame.time.Clock() # To control the frame rate

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()
    car.move(keys)
    car.rotate(keys)

    # Check for collisions
    for obstacle in obstacles:
        if car.rect.colliderect(obstacle):
            print("Game Over - Collision!")
            running = False # End the game on collision

    # Drawing
    screen.fill((0, 0, 0))  # Clear screen with black background
    draw_road(screen)
    draw_obstacles(screen, obstacles)
    car.draw(screen)

    # Update the display
    pygame.display.flip()

    # Cap the frame rate
    clock.tick(60) # 60 frames per second

pygame.quit()

# 5. Yo'l va to'siqlarni yaratish
# Yo'l o'lchamlari (agar oldingi qadamlardan olinmagan bo'lsa)
try:
    road_x, road_y, road_width, height
except NameError:
    road_x = 250
    road_y = 0
    road_width = 300
    height = 600

# Yo'lni chizish funksiyasi
def draw_road(surface):
    """Yo'lni ekranga chizadi."""
    pygame.draw.rect(surface, road_color, (road_x, road_y, road_width, height))

# To'siqlar (oddiy to'rtburchaklar sifatida)
obstacles = []
obstacle_color = (255, 0, 0) # Qizil rang

# Misol to'siqlarni qo'shish
obstacles.append(pygame.Rect(road_x + road_width // 2 - 20, height // 2, 40, 50))
obstacles.append(pygame.Rect(road_x + road_width // 4 - 20, height // 4, 40, 50))
obstacles.append(pygame.Rect(road_x + road_width * 3 // 4 - 20, height * 3 // 4, 40, 50))

# To'siqlarni chizish funksiyasi
def draw_obstacles(surface, obstacles):
    """To'siqlarni ekranga chizadi."""
    for obstacle in obstacles:
        pygame.draw.rect(surface, obstacle_color, obstacle)

# 4. Avtomobil obyektini yaratish
class Car:
    def __init__(self, x, y, image):
        """Avtomobil obyektini initsializatsiya qilish."""
        self.image = image
        if self.image:
            self.rect = self.image.get_rect(center=(x, y))
        else:
            # Agar rasm yuklanmasa, standart to'rtburchak yaratish
            self.rect = pygame.Rect(x - 25, y - 50, 50, 100) # O'lchamlar (50, 100) ga mos

        self.speed = 0
        self.angle = 0 # Mashinaning burilish burchagi

    def move(self, keys):
        """Avtomobilni klaviatura kiritishiga qarab harakatlantirish."""
        if keys[pygame.K_UP]:
            self.speed += 0.1
        if keys[pygame.K_DOWN]:
            self.speed -= 0.1

        # Tezlikni cheklash
        if self.speed > 5:
            self.speed = 5
        if self.speed < -2:
            self.speed = -2

        # Avtomobil pozitsiyasini yangilash (burilishni hisobga olgan holda)
        # Burilishni keyinroq qo'shamiz

        # Sodda harakat (hozircha burilishsiz)
        self.rect.y -= self.speed


    def rotate(self, keys):
        """Avtomobilni klaviatura kiritishiga qarab burish."""
        if keys[pygame.K_LEFT]:
            self.angle += 1
        if keys[pygame.K_RIGHT]:
            self.angle -= 1

        # Burchakni cheklash (agar kerak bo'lsa)
        # self.angle = max(-45, min(45, self.angle)) # Misol uchun -45 va 45 daraja orasida

        # Rasmni burish (agar rasm mavjud bo'lsa)
        if self.image:
            self.rotated_image = pygame.transform.rotate(self.image, self.angle)
            self.rect = self.rotated_image.get_rect(center=self.rect.center)


    def draw(self, surface):
        """Avtomobilni ekranga chizish."""
        if self.image:
            # Burilgan rasmni chizish
            surface.blit(self.rotated_image, self.rect)
        else:
            # Standart to'rtburchakni chizish
            pygame.draw.rect(surface, car_color, self.rect)

# Avtomobil obyektini yaratish (yo'lning o'rtasida pastda)
# road_x, road_width va height o'zgaruvchilari oldingi qadamlardan olingan deb faraz qilinadi.
# Agar ular aniqlanmagan bo'lsa, ularni bu yerda aniqlash kerak.

# Misol uchun (agar oldingi katakchalar ishga tushirilmagan bo'lsa):
try:
    road_x, road_width, height
except NameError:
    road_x = 250
    road_width = 300
    height = 600


car = Car(road_x + road_width // 2, height - 50, car_image)
